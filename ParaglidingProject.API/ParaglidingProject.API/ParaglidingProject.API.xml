<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ParaglidingProject.API</name>
    </assembly>
    <members>
        <member name="M:ParaglidingProject.API.Controllers.AuthController.GetToken(ParaglidingProject.SL.Core.Auth.NS.TransfertObjects.CredentialsParams)">
            <summary>
            Return a Token for an authorized member. Asynchronous ActionResult
            </summary>
            <param name="credentials">Informations for verification</param>   
            <response code="200">Member authorized</response>
            <response code="401">Person unauthorized</response>
            <response code="404">Person not found</response>
            <seealso cref="T:ParaglidingProject.SL.Core.Auth.NS.TransfertObjects.TokenDto"></seealso> 
        </member>
        <member name="T:ParaglidingProject.API.Controllers.FlightsController">
            <summary>
            Flights Controller
            </summary>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.FlightsController.GetFlightAsync(System.Int32)">
            <summary>
            Get a Flight
            </summary>
            <param name="flightId">flightId as an integer</param>
            <returns>An ActionResult of type 200 response who contains a FlightDto.
            An ActionResult of type 404 if no flight was found.
            <seealso cref="T:ParaglidingProject.SL.Core.Flights.NS.TransfertObjects.FlightDto"/>
            </returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.FlightsController.GetAllFlightsAsync(ParaglidingProject.SL.Core.Flights.NS.Helpers.FlightsSSFP)">
            <summary>
            Get all Flights
            </summary>
            <param name="options">It contains all the paramameters used to filter, page , search and sort the list of flights</param>
            <returns>An ActionResult of type 200 response who contains a IReadOnlyCollection of FlightDto.
            An ActionResult of type 404 if no flight was found.
            <seealso cref="T:ParaglidingProject.SL.Core.Flights.NS.TransfertObjects.FlightDto"/>
            </returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.FlightsController.GetAllFlightsForPilotInDateRangeAsync(System.Int32,ParaglidingProject.SL.Core.Flights.NS.TransfertObjects.DateRangeParams)">
            <summary>
            Get all Flights for a Pilot in a date range 
            </summary>
            <param name="pilotId">pilotId as an integer</param>
            <param name="dates">dates as DateRangeParams</param>
            <returns>An ActionResult of type 200 response who contains a IReadOnlyCollection of FlightDto.
            An ActionResult of type 404 if no flight was found.
            An ActionResult of type 404 if no flight was found in de range of date.
            <seealso cref="T:ParaglidingProject.SL.Core.Flights.NS.TransfertObjects.FlightDto"/>
            </returns>
        </member>
        <member name="T:ParaglidingProject.API.Controllers.LevelsController">
            <summary>
            Controller for level.
            </summary>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.LevelsController.GetLevelAsync(System.Int32)">
            <summary>
            Get a level by id.
            </summary>
            <param name="levelId">A level id as an integer found in route.</param>
            <returns>
            An action result of type 202 which contains a level Dto.
            An action result of type 404 if no level was found.
            <seealso cref="T:ParaglidingProject.SL.Core.Levels.NS.TransfertObjects.LevelDto"/>
            </returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.LevelsController.GetAllLevelsAsync">
            <summary>
            Get all levels.
            </summary>
            <returns>
            An action result of type 202 which contains a collection of type level Dto.
            An action result of type 404 if no levels were found.
            <seealso cref="T:ParaglidingProject.SL.Core.Levels.NS.TransfertObjects.LevelDto"/>
            </returns>
        </member>
        <member name="T:ParaglidingProject.API.Controllers.ParagliderController">
            <summary>
            the controller of paraglider
            </summary>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.ParagliderController.GetParagliderAsync(System.Int32)">
            <summary>
            get a paraglider by id
            </summary>
            <param name="paragliderId">The unique id of a paraglider</param>
            <returns>
            an actionresult of type 202 who contain a paragliderDto
            an actionresult of type 404 if no paraglider was find
            <seealso cref="T:ParaglidingProject.SL.Core.Paraglider.NS.TransfertObjects.ParagliderDto"/>
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.ParagliderController.GetAllParaglidersAsync(ParaglidingProject.SL.Core.Paraglider.NS.Helpers.ParaglidersSSFP)">
            <summary>
            get all paraglider
            </summary>
            <param name="options">User options to search, sort, filter and paginate a list of paragliders obtained from a query strings.</param>
            <returns>
            an actionresult of type 202 who contain a list of paragliderDto
            an actionresult of type 404 if no paraglider was find
            <seealso cref="T:ParaglidingProject.SL.Core.Paraglider.NS.TransfertObjects.ParagliderDto"/>
            </returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.ParagliderController.CreateResourceUri(ParaglidingProject.SL.Core.Paraglider.NS.Helpers.ParaglidersSSFP,ParaglidingProject.API.Controllers.ParagliderController.ResourceUriType)">
            <summary>
            Refactoring method that, given user parameters, creates a custom URL link to the previous and next page.
            </summary>
            <param name="options">The user custom options or default options for the search, sort, filter and pagination features.</param>
            <param name="type">One element of the enumeration to distinguish the multiple types of URLs to create.</param>
            <returns>
            A string that contains an URL link to the previous, the next page, or the current page by default.
            </returns>
        </member>
        <member name="T:ParaglidingProject.API.Controllers.ParagliderModelController">
            <summary>
            the controller of paragliderModels
            </summary>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.ParagliderModelController.#ctor(ParaglidingProject.SL.Core.ParagliderModel.NS.IParagliderModelService,ParaglidingProject.SL.Core.Paraglider.NS.IParagliderService)">
            <summary>
            ParagliderModel interface constructor.
            </summary>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.ParagliderModelController.GetParagliderModelAsync(System.Int32)">
            <summary>
            get a paraglidermodel by id
            </summary>
            <param name="modelParagliderId">The unique id of a paraglider</param>
            <returns>
            an actionresult of type 202 who contain a paragliderDto
            an actionresult of type 404 if no paraglider was find
            <seealso cref="T:ParaglidingProject.SL.Core.ParagliderModel.NS.TransfertObjects.ParagliderModelDto"/>
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.ParagliderModelController.GetAllModelParaglidersAsync(ParaglidingProject.SL.Core.ParagliderModel.NS.Helpers.ParagliderModelsSSFP)">
            <summary>
            get all paraglidermodels
            </summary>
            <param name="options"> User options to sort, search, filter pagination </param>
            <returns>
            an actionresult of type 202 who contain a list of paragliderModelDto
            an actionresult of type 404 if no paraglidermodel was find
            <seealso cref="T:ParaglidingProject.SL.Core.ParagliderModel.NS.TransfertObjects.ParagliderModelDto"/>
            </returns>
        </member>
        <member name="T:ParaglidingProject.API.Controllers.PossessionsController">
            <summary>
            Possesion controller.
            </summary>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.PossessionsController.#ctor(ParaglidingProject.SL.Core.Possession.NS.IPossessionsService,ParaglidingProject.SL.Core.Pilot.NS.IPilotsService)">
            <summary>
            Possesion interface constructor.
            </summary>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.PossessionsController.GetPossessionAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously getting a Possession by PilotId and LicenseId.
            </summary>
            <param name="Pilotid">Id of the pilot</param>
            <param name="Licenseid">Id of the pilot</param>
            <returns> 
            Status 202 containing a PossessionDto.
            Status 404 if no Possessions was found.
            </returns>
            <seealso cref="T:ParaglidingProject.SL.Core.Possession.NS.TransferObjects.PossessionDto"/>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.PossessionsController.GetAllPossessionsAsync(ParaglidingProject.SL.Core.Possession.NS.Helpers.PossessionSSFP)">
            <summary>
            Asynchronously getting a collection of PossessionDto.
            </summary>
            <returns> 
            Status 202 containing a collection of PossessionDto.
            Status 404 if no Possessions was found.
            </returns>
            <seealso cref="T:ParaglidingProject.SL.Core.Possession.NS.TransferObjects.PossessionDto"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ParaglidingProject.API.Controllers.PossessionsController.CreateResourceUri(ParaglidingProject.SL.Core.Possession.NS.Helpers.PossessionSSFP,ParaglidingProject.API.Controllers.PossessionsController.RessourceUriType)" -->
        <member name="M:ParaglidingProject.API.Controllers.PossessionsController.GetPossessionByPilotAsync(System.Int32)">
            <summary>
            Asynchronously getting all Possession for a Pilot with his Id.
            </summary>
            <param name="pilotId"> Id of the pilot</param>
            <returns> 
            Status 202 containing a collection PossessionDto for a specific PilotId.
            Status 404 if no Possessions was found.
            </returns>
            <seealso cref="T:ParaglidingProject.SL.Core.Possession.NS.TransferObjects.PossessionDto"/>
        </member>
        <member name="T:ParaglidingProject.API.Controllers.RolesController">
            <summary>
            Role's controller
            </summary>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.RolesController.GetRoleAsync(System.Int32)">
            <summary>
            gets Role by Id
            </summary>
            <param name="roleId">Unique id of a role</param>
            <returns>
            an actionresult of type 202 that contain a RoleDto
            an actionresult of type 404 if no Role was find
            <seealso cref="T:ParaglidingProject.SL.Core.Role.NS.TransfertObjects.RoleDto"/>
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.RolesController.GetAllRoleAsync">
            <summary>
            get all Roles
            </summary>
            <returns>
            an actionresult of type 202 that contains all RoleDto
            an actionresult of type 404 if no RoleDto was find
            <seealso cref="T:ParaglidingProject.SL.Core.Role.NS.TransfertObjects.RoleDto"/>
            </returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.SiteController.GetSiteAsync(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.SiteController.GetAllSiteAsync(ParaglidingProject.SL.Core.Site.NS.Helpers.SiteSSFP)">
            <summary>
            
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.SiteController.GetAllLandingAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.SiteController.GetAllTakeoffAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.SiteController.CreateSite(ParaglidingProject.SL.Core.Site.NS.TransfertObjects.SiteDto)">
            <summary>
            
            </summary>
            <param name="pSiteDto"></param>
            <returns></returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.SiteController.EditSite(ParaglidingProject.SL.Core.Site.NS.TransfertObjects.SiteDto)">
            <summary>
            
            </summary>
            <param name="pSiteDto"></param>
            <returns></returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.SiteController.Deletesite(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.SiteController.PatchSiteAsync(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ParaglidingProject.SL.Core.Site.NS.TransfertObjects.SitePatchDto})">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="patchDocument"></param>
            <returns></returns>
        </member>
        <member name="T:ParaglidingProject.API.Controllers.SubscriptionController">
            <summary>
            the controller of Subscription
            </summary>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.SubscriptionController.GetSubscriptionAsync(System.Int32)">
            <summary>
            gets Subscription by Id
            </summary>
            <param name="Id">Unique id of a Subscription</param>
            <returns>
            an actionresult of type 202 that contain a RoleDto
            an actionresult of type 404 if no Role was find
            <seealso cref="T:ParaglidingProject.SL.Core.Subscription.NS.transferObjects.SubscriptionDto"/>
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.SubscriptionController.GetAllSubscriptionAsync(ParaglidingProject.SL.Core.Subscription.NS.Helpers.SubscriptionSSPF)">
            <summary>
            get all subscriptions
            </summary>
            <param name="options">User options to search, sort, filter and paginate a list of subscriptions obtained from a query strings.</param>
            <returns>
            an actionresult of type 202 who contain a list of paragliderDto
            an actionresult of type 404 if no paraglider was find
            <seealso cref="T:ParaglidingProject.SL.Core.Subscription.NS.transferObjects.SubscriptionDto"/>
            </returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.TraineeshipController.GetAllTraineeShipAsync(ParaglidingProject.SL.Core.TraineeShip.NS.NewFolder1.TraineeshipSSFP)">
            <summary>
            /
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.TraineeshipController.CreateUriTraineeship(ParaglidingProject.SL.Core.TraineeShip.NS.NewFolder1.TraineeshipSSFP,ParaglidingProject.API.Controllers.TraineeshipController.RessourceUriType)">
            <summary>
            </summary>
            <param name="options"> the user custom options for search, sort ,filter page</param>
            <param name="type"> one element of the enumeration  to distinguish multiple type of url to create</param>
            <returns></returns>
        </member>
        <member name="T:ParaglidingProject.API.Controllers.TraineeshipPayementController">
            <summary>
            TraineeshipPayment's Controller
            </summary>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.TraineeshipPayementController.GetTraineeshipAsync(System.Int32,System.Int32)">
            <summary>
            Get a Traineeship
            </summary>
            <param name="traineeshipId">traineeshipId as an integer</param>
            <param name="pilotId">pilotId as an integer</param>
            <returns>An ActionResult of type 200 response who contains a TraineeshipPaymentDto.
            An ActionResult of type 404 response if no TraineeshipPayment was found.
            <seealso cref="T:ParaglidingProject.SL.Core.TraineeshipPayement.NS.TransferObjects.TraineeshipPaymentDto"/>
            </returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.TraineeshipPayementController.GetAllTraineeshipPaymentAsync(ParaglidingProject.SL.Core.TraineeshipPayment.NS.Helpers.TraineeshipPaymentSSFP)">
            <summary>
            Get all TraineeshipPayments
            </summary>
            <param name="options">options as TraineeshipPaymentSSFP</param>
            <returns>An ActionResult of type 200 response who contains a IReadOnlyCollection of TraineeshipPaymentDto.
            An ActionResult of type 404 response if no TraineeshipPayment was found.
            <seealso cref="T:ParaglidingProject.SL.Core.TraineeshipPayement.NS.TransferObjects.TraineeshipPaymentDto"/>
            </returns>
        </member>
        <member name="M:ParaglidingProject.API.Controllers.TraineeshipPayementController.CreateTraineeshipPaymentsRessourceUri(ParaglidingProject.SL.Core.TraineeshipPayment.NS.Helpers.TraineeshipPaymentSSFP,ParaglidingProject.API.Controllers.TraineeshipPayementController.RessourceUriType)">
            <summary>
            Creation of a TraineeshipPayment ressource Uri
            </summary>
            <param name="options">options as TraineeshipPaymentSSFP</param>
            <param name="type">type as RessourceUriType</param>
            <returns>An url of type IUrlHelper</returns>
        </member>
    </members>
</doc>

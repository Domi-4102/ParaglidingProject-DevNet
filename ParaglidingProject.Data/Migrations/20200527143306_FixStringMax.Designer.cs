// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParaglidingProject.Data;

namespace ParaglidingProject.Data.Migrations
{
    [DbContext(typeof(ParaglidingClubContext))]
    [Migration("20200527143306_FixStringMax")]
    partial class FixStringMax
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ParaglidingProject.Models.Flight", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("FlightDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LandingSiteID")
                        .HasColumnType("int");

                    b.Property<int>("ParagliderID")
                        .HasColumnType("int");

                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.Property<int>("TakeOffSiteID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LandingSiteID");

                    b.HasIndex("ParagliderID");

                    b.HasIndex("PilotID");

                    b.HasIndex("TakeOffSiteID");

                    b.ToTable("Flight");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Duration = 1m,
                            FlightDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LandingSiteID = 2,
                            ParagliderID = 1,
                            PilotID = 1,
                            TakeOffSiteID = 1
                        },
                        new
                        {
                            ID = 2,
                            Duration = 1.25m,
                            FlightDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LandingSiteID = 2,
                            ParagliderID = 2,
                            PilotID = 2,
                            TakeOffSiteID = 3
                        },
                        new
                        {
                            ID = 3,
                            Duration = 1.50m,
                            FlightDate = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LandingSiteID = 2,
                            ParagliderID = 3,
                            PilotID = 3,
                            TakeOffSiteID = 3
                        },
                        new
                        {
                            ID = 4,
                            Duration = 2m,
                            FlightDate = new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LandingSiteID = 4,
                            ParagliderID = 4,
                            PilotID = 4,
                            TakeOffSiteID = 1
                        },
                        new
                        {
                            ID = 5,
                            Duration = 2.75m,
                            FlightDate = new DateTime(2019, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LandingSiteID = 4,
                            ParagliderID = 5,
                            PilotID = 5,
                            TakeOffSiteID = 1
                        },
                        new
                        {
                            ID = 6,
                            Duration = 1m,
                            FlightDate = new DateTime(2020, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LandingSiteID = 4,
                            ParagliderID = 4,
                            PilotID = 6,
                            TakeOffSiteID = 3
                        },
                        new
                        {
                            ID = 7,
                            Duration = 2m,
                            FlightDate = new DateTime(2019, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LandingSiteID = 2,
                            ParagliderID = 3,
                            PilotID = 7,
                            TakeOffSiteID = 1
                        },
                        new
                        {
                            ID = 8,
                            Duration = 1.50m,
                            FlightDate = new DateTime(2019, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LandingSiteID = 2,
                            ParagliderID = 2,
                            PilotID = 8,
                            TakeOffSiteID = 3
                        },
                        new
                        {
                            ID = 9,
                            Duration = 0.75m,
                            FlightDate = new DateTime(2020, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            LandingSiteID = 4,
                            ParagliderID = 1,
                            PilotID = 9,
                            TakeOffSiteID = 1
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.Level", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Skill")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.ToTable("Level");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IsActive = true,
                            Name = "Level 1",
                            Skill = "brevet A"
                        },
                        new
                        {
                            ID = 2,
                            IsActive = true,
                            Name = "Level 2",
                            Skill = "brevet B"
                        },
                        new
                        {
                            ID = 3,
                            IsActive = true,
                            Name = "Level 3",
                            Skill = "brevet C"
                        },
                        new
                        {
                            ID = 4,
                            IsActive = false,
                            Name = "Level 4",
                            Skill = "brevet D"
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.License", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LevelID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.HasIndex("LevelID");

                    b.ToTable("License");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            LevelID = 1,
                            Title = "Pilote de parapente"
                        },
                        new
                        {
                            ID = 2,
                            LevelID = 2,
                            Title = "Pilote XC de parapente"
                        },
                        new
                        {
                            ID = 3,
                            LevelID = 2,
                            Title = "Moniteur de parapente"
                        },
                        new
                        {
                            ID = 4,
                            LevelID = 3,
                            Title = "Pilote au treuil de parapente"
                        },
                        new
                        {
                            ID = 5,
                            LevelID = 3,
                            Title = "Examinateur de parapente"
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.Paraglider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CommissioningDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastRevisionDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("ParagliderModelID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParagliderModelID");

                    b.ToTable("Paraglider");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CommissioningDate = new DateTime(2011, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastRevisionDate = new DateTime(2015, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cabriolet",
                            ParagliderModelID = 1
                        },
                        new
                        {
                            ID = 2,
                            CommissioningDate = new DateTime(2011, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastRevisionDate = new DateTime(2016, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "F350",
                            ParagliderModelID = 2
                        },
                        new
                        {
                            ID = 3,
                            CommissioningDate = new DateTime(2011, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastRevisionDate = new DateTime(2013, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malibu",
                            ParagliderModelID = 3
                        },
                        new
                        {
                            ID = 4,
                            CommissioningDate = new DateTime(2011, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastRevisionDate = new DateTime(2015, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Murciélago",
                            ParagliderModelID = 4
                        },
                        new
                        {
                            ID = 5,
                            CommissioningDate = new DateTime(2012, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastRevisionDate = new DateTime(2012, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Durango",
                            ParagliderModelID = 5
                        },
                        new
                        {
                            ID = 6,
                            CommissioningDate = new DateTime(2010, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            LastRevisionDate = new DateTime(2011, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mercedes",
                            ParagliderModelID = 5
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.ParagliderModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("date");

                    b.Property<string>("ApprovalNumber")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxWeightPilot")
                        .HasColumnType("int");

                    b.Property<int>("MinWeightPilot")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.ToTable("ParagliderModel");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ApprovalDate = new DateTime(1990, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovalNumber = "EN/LTF A",
                            IsActive = true,
                            MaxWeightPilot = 70,
                            MinWeightPilot = 50,
                            Size = "22 m²"
                        },
                        new
                        {
                            ID = 2,
                            ApprovalDate = new DateTime(1993, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovalNumber = "EN/LTF A",
                            IsActive = true,
                            MaxWeightPilot = 80,
                            MinWeightPilot = 60,
                            Size = "24 m²"
                        },
                        new
                        {
                            ID = 3,
                            ApprovalDate = new DateTime(2001, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovalNumber = "EN/LTF A",
                            IsActive = true,
                            MaxWeightPilot = 95,
                            MinWeightPilot = 70,
                            Size = "26 m²"
                        },
                        new
                        {
                            ID = 4,
                            ApprovalDate = new DateTime(2002, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovalNumber = "EN/LTF A",
                            IsActive = true,
                            MaxWeightPilot = 110,
                            MinWeightPilot = 85,
                            Size = "28 m²"
                        },
                        new
                        {
                            ID = 5,
                            ApprovalDate = new DateTime(2019, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovalNumber = "EN/LTF A",
                            IsActive = false,
                            MaxWeightPilot = 130,
                            MinWeightPilot = 100,
                            Size = "31 m²"
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.Pilot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Pilot");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Rue DeChezYves 4020",
                            FirstName = "Yves",
                            IsActive = true,
                            LastName = "Blavier",
                            PhoneNumber = "0489055522",
                            Weight = 100
                        },
                        new
                        {
                            ID = 2,
                            Address = "Rue DeChezAlison 4030",
                            FirstName = "Alison",
                            IsActive = true,
                            LastName = "Franck",
                            PhoneNumber = "0489955522",
                            Weight = 50
                        },
                        new
                        {
                            ID = 3,
                            Address = "Rue Antho 4420",
                            FirstName = "Antho",
                            IsActive = true,
                            LastName = "Truc",
                            PhoneNumber = "0499055522",
                            Weight = 70
                        },
                        new
                        {
                            ID = 4,
                            Address = "Rue DeChezPedro 4020",
                            FirstName = "El Pedro",
                            IsActive = true,
                            LastName = "Gomez",
                            PhoneNumber = "0489055532",
                            Weight = 80
                        },
                        new
                        {
                            ID = 5,
                            Address = "Rue DeChezLionel 4030",
                            FirstName = "Lionel",
                            IsActive = true,
                            LastName = "Hardy",
                            PhoneNumber = "0489555522",
                            Weight = 65
                        },
                        new
                        {
                            ID = 6,
                            Address = "Rue Technifutur 4000",
                            FirstName = "Sandrine",
                            IsActive = true,
                            LastName = "Remy",
                            PhoneNumber = "0488055522",
                            Weight = 55
                        },
                        new
                        {
                            ID = 7,
                            Address = "Rue DeChezFred 4000",
                            FirstName = "Fred",
                            IsActive = true,
                            LastName = "Breda",
                            PhoneNumber = "0489955522",
                            Weight = 70
                        },
                        new
                        {
                            ID = 8,
                            Address = "Rue ChezSteve 4030",
                            FirstName = "Steve",
                            IsActive = true,
                            LastName = "Ramackers",
                            PhoneNumber = "0489055622",
                            Weight = 75
                        },
                        new
                        {
                            ID = 9,
                            Address = "Rue Carmo 4020",
                            FirstName = "Francisco",
                            IsActive = true,
                            LastName = "Carmo",
                            PhoneNumber = "0499955522",
                            Weight = 60
                        },
                        new
                        {
                            ID = 10,
                            Address = "Rue DeChezJunior",
                            FirstName = "Junior",
                            IsActive = false,
                            LastName = "Capellen",
                            PhoneNumber = "0488066522",
                            Weight = 68
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.PilotTraineeship", b =>
                {
                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.Property<int>("TraineeshipID")
                        .HasColumnType("int");

                    b.HasKey("PilotID", "TraineeshipID");

                    b.HasIndex("TraineeshipID");

                    b.ToTable("PilotTraineeship");

                    b.HasData(
                        new
                        {
                            PilotID = 1,
                            TraineeshipID = 1
                        },
                        new
                        {
                            PilotID = 2,
                            TraineeshipID = 2
                        },
                        new
                        {
                            PilotID = 3,
                            TraineeshipID = 3
                        },
                        new
                        {
                            PilotID = 4,
                            TraineeshipID = 4
                        },
                        new
                        {
                            PilotID = 5,
                            TraineeshipID = 1
                        },
                        new
                        {
                            PilotID = 6,
                            TraineeshipID = 2
                        },
                        new
                        {
                            PilotID = 7,
                            TraineeshipID = 3
                        },
                        new
                        {
                            PilotID = 8,
                            TraineeshipID = 4
                        },
                        new
                        {
                            PilotID = 9,
                            TraineeshipID = 1
                        },
                        new
                        {
                            PilotID = 10,
                            TraineeshipID = 2
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.Possession", b =>
                {
                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.Property<int>("LicenseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("date");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSucceeded")
                        .HasColumnType("bit");

                    b.HasKey("PilotID", "LicenseID");

                    b.HasIndex("LicenseID");

                    b.ToTable("Possession");

                    b.HasData(
                        new
                        {
                            PilotID = 1,
                            LicenseID = 2,
                            ExamDate = new DateTime(2019, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ID = 0,
                            IsActive = false,
                            IsSucceeded = true
                        },
                        new
                        {
                            PilotID = 2,
                            LicenseID = 1,
                            ExamDate = new DateTime(2019, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ID = 0,
                            IsActive = true,
                            IsSucceeded = true
                        },
                        new
                        {
                            PilotID = 3,
                            LicenseID = 4,
                            ExamDate = new DateTime(2019, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ID = 0,
                            IsActive = true,
                            IsSucceeded = true
                        },
                        new
                        {
                            PilotID = 4,
                            LicenseID = 3,
                            ExamDate = new DateTime(2017, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ID = 0,
                            IsActive = true,
                            IsSucceeded = true
                        },
                        new
                        {
                            PilotID = 5,
                            LicenseID = 4,
                            ExamDate = new DateTime(2018, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ID = 0,
                            IsActive = true,
                            IsSucceeded = true
                        },
                        new
                        {
                            PilotID = 2,
                            LicenseID = 2,
                            ExamDate = new DateTime(2020, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ID = 0,
                            IsActive = true,
                            IsSucceeded = true
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PilotID")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            ID = 3,
                            IsActive = true,
                            Name = "Secretary",
                            PilotID = 1
                        },
                        new
                        {
                            ID = 2,
                            IsActive = true,
                            Name = "Treasurer",
                            PilotID = 8
                        },
                        new
                        {
                            ID = 1,
                            IsActive = true,
                            Name = "President",
                            PilotID = 4
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.Site", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AltitudeTakeOff")
                        .HasColumnType("int");

                    b.Property<string>("ApproachManeuver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LevelID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Orientation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SiteGeoCoordinate")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("SiteType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LevelID");

                    b.ToTable("Site");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AltitudeTakeOff = 30,
                            IsActive = true,
                            LevelID = 1,
                            Name = "Boom",
                            Orientation = "S-E",
                            SiteGeoCoordinate = "51° 08′ 33″ nord, 4° 36′ 67'' est",
                            SiteType = 1
                        },
                        new
                        {
                            ID = 2,
                            AltitudeTakeOff = 0,
                            ApproachManeuver = "A vue",
                            IsActive = true,
                            LevelID = 2,
                            Name = "Hornu",
                            Orientation = "N-E",
                            SiteGeoCoordinate = "50° 26′ 02″ nord, 3° 49′ 39″ est",
                            SiteType = 2
                        },
                        new
                        {
                            ID = 3,
                            AltitudeTakeOff = 35,
                            IsActive = true,
                            LevelID = 3,
                            Name = "Ouren",
                            Orientation = "S-O",
                            SiteGeoCoordinate = "50° 08′ 25″ nord, 6° 08′ 02″ est",
                            SiteType = 1
                        },
                        new
                        {
                            ID = 4,
                            AltitudeTakeOff = 0,
                            ApproachManeuver = "Aux instruments",
                            IsActive = false,
                            LevelID = 1,
                            Name = "Avister",
                            Orientation = "S-O",
                            SiteGeoCoordinate = "50° 55′ 41″ nord, 5° 57′ 87″ est",
                            SiteType = 2
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.Subscription", b =>
                {
                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("SubscriptionAmount")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Year");

                    b.ToTable("Subscription");

                    b.HasData(
                        new
                        {
                            Year = 2017,
                            IsActive = true,
                            SubscriptionAmount = 180m
                        },
                        new
                        {
                            Year = 2018,
                            IsActive = true,
                            SubscriptionAmount = 200m
                        },
                        new
                        {
                            Year = 2019,
                            IsActive = true,
                            SubscriptionAmount = 225m
                        },
                        new
                        {
                            Year = 2020,
                            IsActive = true,
                            SubscriptionAmount = 250m
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.SubscriptionPayment", b =>
                {
                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DatePay")
                        .HasColumnType("date");

                    b.HasKey("PilotID", "SubscriptionID");

                    b.HasIndex("SubscriptionID");

                    b.ToTable("SubscriptionPayment");

                    b.HasData(
                        new
                        {
                            PilotID = 1,
                            SubscriptionID = 2017,
                            DatePay = new DateTime(2017, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 2,
                            SubscriptionID = 2017,
                            DatePay = new DateTime(2017, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 3,
                            SubscriptionID = 2017,
                            DatePay = new DateTime(2017, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 4,
                            SubscriptionID = 2017,
                            DatePay = new DateTime(2017, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 5,
                            SubscriptionID = 2017,
                            DatePay = new DateTime(2017, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 6,
                            SubscriptionID = 2017,
                            DatePay = new DateTime(2017, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 7,
                            SubscriptionID = 2017,
                            DatePay = new DateTime(2017, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 8,
                            SubscriptionID = 2017,
                            DatePay = new DateTime(2017, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 9,
                            SubscriptionID = 2017,
                            DatePay = new DateTime(2017, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 10,
                            SubscriptionID = 2017,
                            DatePay = new DateTime(2017, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 1,
                            SubscriptionID = 2018,
                            DatePay = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 2,
                            SubscriptionID = 2018,
                            DatePay = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 3,
                            SubscriptionID = 2018,
                            DatePay = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 4,
                            SubscriptionID = 2018,
                            DatePay = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 5,
                            SubscriptionID = 2018,
                            DatePay = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 6,
                            SubscriptionID = 2018,
                            DatePay = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 7,
                            SubscriptionID = 2018,
                            DatePay = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 8,
                            SubscriptionID = 2018,
                            DatePay = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 9,
                            SubscriptionID = 2018,
                            DatePay = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 10,
                            SubscriptionID = 2018,
                            DatePay = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 1,
                            SubscriptionID = 2019,
                            DatePay = new DateTime(2019, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 2,
                            SubscriptionID = 2019,
                            DatePay = new DateTime(2019, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 3,
                            SubscriptionID = 2019,
                            DatePay = new DateTime(2019, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 4,
                            SubscriptionID = 2019,
                            DatePay = new DateTime(2019, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 5,
                            SubscriptionID = 2019,
                            DatePay = new DateTime(2019, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 6,
                            SubscriptionID = 2019,
                            DatePay = new DateTime(2019, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 7,
                            SubscriptionID = 2019,
                            DatePay = new DateTime(2019, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 8,
                            SubscriptionID = 2019,
                            DatePay = new DateTime(2019, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 9,
                            SubscriptionID = 2019,
                            DatePay = new DateTime(2019, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 1,
                            SubscriptionID = 2020,
                            DatePay = new DateTime(2020, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.Traineeship", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LicenseID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ID");

                    b.HasIndex("LicenseID");

                    b.ToTable("Traineeship");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EndDate = new DateTime(2020, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LicenseID = 1,
                            Price = 620m,
                            StartDate = new DateTime(2020, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            EndDate = new DateTime(2020, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LicenseID = 1,
                            Price = 590m,
                            StartDate = new DateTime(2020, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            EndDate = new DateTime(2020, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LicenseID = 2,
                            Price = 590m,
                            StartDate = new DateTime(2020, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            EndDate = new DateTime(2020, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LicenseID = 4,
                            Price = 620m,
                            StartDate = new DateTime(2020, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            EndDate = new DateTime(2021, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            LicenseID = 4,
                            Price = 520m,
                            StartDate = new DateTime(2020, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.TraineeshipPayment", b =>
                {
                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.Property<int>("TraineeshipID")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("date");

                    b.HasKey("PilotID", "TraineeshipID");

                    b.HasIndex("TraineeshipID");

                    b.ToTable("TraineeshipPayment");

                    b.HasData(
                        new
                        {
                            PilotID = 1,
                            TraineeshipID = 1,
                            IsPaid = true,
                            PaymentDate = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 2,
                            TraineeshipID = 2,
                            IsPaid = true,
                            PaymentDate = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 3,
                            TraineeshipID = 3,
                            IsPaid = true,
                            PaymentDate = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 4,
                            TraineeshipID = 4,
                            IsPaid = true,
                            PaymentDate = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 5,
                            TraineeshipID = 1,
                            IsPaid = true,
                            PaymentDate = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 6,
                            TraineeshipID = 2,
                            IsPaid = true,
                            PaymentDate = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 7,
                            TraineeshipID = 3,
                            IsPaid = true,
                            PaymentDate = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 8,
                            TraineeshipID = 4,
                            IsPaid = true,
                            PaymentDate = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 9,
                            TraineeshipID = 1,
                            IsPaid = true,
                            PaymentDate = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotID = 10,
                            TraineeshipID = 2,
                            IsPaid = true,
                            PaymentDate = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ParaglidingProject.Models.Flight", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Site", "LandingSite")
                        .WithMany("LandingFlights")
                        .HasForeignKey("LandingSiteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ParaglidingProject.Models.Paraglider", "Paraglider")
                        .WithMany("Flights")
                        .HasForeignKey("ParagliderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithMany("Flights")
                        .HasForeignKey("PilotID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ParaglidingProject.Models.Site", "TakeOffSite")
                        .WithMany("TakeOffFlights")
                        .HasForeignKey("TakeOffSiteID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ParaglidingProject.Models.License", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Level", "Level")
                        .WithMany("Licenses")
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.Paraglider", b =>
                {
                    b.HasOne("ParaglidingProject.Models.ParagliderModel", "ParagliderModel")
                        .WithMany("Paragliders")
                        .HasForeignKey("ParagliderModelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.PilotTraineeship", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithMany("PilotTraineeships")
                        .HasForeignKey("PilotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParaglidingProject.Models.Traineeship", "Traineeship")
                        .WithMany("PilotTraineeships")
                        .HasForeignKey("TraineeshipID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ParaglidingProject.Models.Possession", b =>
                {
                    b.HasOne("ParaglidingProject.Models.License", "License")
                        .WithMany("Possessions")
                        .HasForeignKey("LicenseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithMany("Possessions")
                        .HasForeignKey("PilotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.Role", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithOne("Role")
                        .HasForeignKey("ParaglidingProject.Models.Role", "PilotID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ParaglidingProject.Models.Site", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Level", "Level")
                        .WithMany("Sites")
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.SubscriptionPayment", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithMany("SubscriptionsPayments")
                        .HasForeignKey("PilotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParaglidingProject.Models.Subscription", "Subscription")
                        .WithMany("SubscriptionPayments")
                        .HasForeignKey("SubscriptionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ParaglidingProject.Models.Traineeship", b =>
                {
                    b.HasOne("ParaglidingProject.Models.License", "License")
                        .WithMany("Traineeships")
                        .HasForeignKey("LicenseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.TraineeshipPayment", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithMany("TraineeshipPayments")
                        .HasForeignKey("PilotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParaglidingProject.Models.Traineeship", "Traineeship")
                        .WithMany("TraineeshipPayments")
                        .HasForeignKey("TraineeshipID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
